.. _example11_saving_data.py:

=============
example11_saving_data.py
=============

::

    # Copyright 2018 The SQLNet Company GmbH

    # Permission is hereby granted, free of charge, to any person obtaining a copy
    # of this software and associated documentation files (the "Software"), to
    # deal in the Software without restriction, including without limitation the
    # rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
    # sell copies of the Software, and to permit persons to whom the Software is
    # furnished to do so, subject to the following conditions:

    # The above copyright notice and this permission notice shall be included in
    # all copies or substantial portions of the Software.

    # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    # FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    # DEALINGS IN THE SOFTWARE.

    import matplotlib.pyplot as plt
    import numpy as np
    import pandas as pd
    import scipy.stats
    import sklearn.linear_model as linear_model

    import autosql.aggregations as aggregations
    import autosql.engine as engine
    import autosql.loss_functions as loss_functions
    import autosql.models as models

    #----------------

    engine.set_project("examples")

    #----------------
    # Generate artificial dataset
    # The problem we create looks like this:
    #
    # SELECT COUNT( * )
    # FROM POPULATION t1
    # LEFT JOIN PERIPHERAL t2
    # ON t1.join_key = t2.join_key
    # WHERE (
    #    ( t1.time_stamp - t2.time_stamp <= 0.5 )
    # ) AND t2.time_stamp <= t1.time_stamp
    # GROUP BY t1.join_key,
    #          t1.time_stamp;
    #
    # Don't worry - you don't really have to understand this part.
    # This is just how we generate the example dataset. To learn more
    # about AutoSQL just skip to "Upload data to the AutoSQL engine".


    population_table = pd.DataFrame()
    population_table["column_01"] = np.random.rand(500) * 2.0 - 1.0
    population_table["join_key"] = range(500)
    population_table["time_stamp_population"] = np.random.rand(500)

    peripheral_table = pd.DataFrame()
    peripheral_table["column_01"] = np.random.rand(125000) * 2.0 - 1.0
    peripheral_table["join_key"] = [
        int(500.0 * np.random.rand(1)[0]) for i in range(125000)]
    peripheral_table["time_stamp_peripheral"] = np.random.rand(125000)

    # ----------------

    temp = peripheral_table.merge(
        population_table[["join_key", "time_stamp_population"]],
        how="left",
        on="join_key"
    )

    # Apply some conditions
    temp = temp[
        (temp["time_stamp_peripheral"] <= temp["time_stamp_population"]) &
        (temp["time_stamp_peripheral"] >= temp["time_stamp_population"] - 0.5)
    ]

    # Define the aggregation
    temp = temp[["column_01", "join_key"]].groupby(
        ["join_key"],
        as_index=False
    ).count()

    temp = temp.rename(index=str, columns={"column_01": "targets"})

    population_table = population_table.merge(
        temp,
        how="left",
        on="join_key"
    )

    del temp

    # ----------------

    population_table = population_table.rename(
        index=str, columns={"time_stamp_population": "time_stamp"})

    peripheral_table = peripheral_table.rename(
        index=str, columns={"time_stamp_peripheral": "time_stamp"})

    # ----------------

    # Replace NaN targets with 0.0 - target values may never be NaN!.
    population_table["targets"] = [
        0.0 if val != val else val for val in population_table["targets"]
    ]

    #----------------
    # Upload data to the AutoSQL engine

    peripheral_on_engine = engine.DataFrame(
        name="PERIPHERAL",
        numerical=["column_01"],
        join_keys=["join_key"],
        time_stamps=["time_stamp"]
    )

    # The low-level API allows you to upload
    # data to the AutoSQL engine in a piecewise fashion.
    # Here we load the first part of the pandas.DataFrame...
    peripheral_on_engine.send(
        peripheral_table[:2000]
    )

    # ...and now we load the second part
    peripheral_on_engine.append(
        peripheral_table[2000:]
    )

    population_on_engine = engine.DataFrame(
        name="POPULATION",
        numerical=["column_01"],
        join_keys=["join_key"],
        time_stamps=["time_stamp"],
        targets=["targets"]
    )

    # The low-level API allows you to upload
    # data to the AutoSQL engine in a piecewise fashion.
    # Here we load the first part of the pandas.DataFrame...
    population_on_engine.send(
        population_table[:20]
    )

    # ...and now we load the second part
    population_on_engine.append(
       population_table[20:]
    )

    # ----------------
    # You can save the data frame like this

    peripheral_on_engine.save()

    population_on_engine.save()

    # ----------------
    # You can reload the data frame like this

    peripheral_on_engine2 = engine.DataFrame("PERIPHERAL").load()

    population_on_engine2 = engine.DataFrame("POPULATION").load()

    # ----------------
    # When the data frame is already loaded in the AutoSQL engine
    # you can just use .refresh(...)

    peripheral_on_engine3 = engine.DataFrame("PERIPHERAL").refresh()

    population_on_engine3 = engine.DataFrame("POPULATION").refresh()
