.. _example_03_categorical_2.R:

=============
example_03_categorical_2.R
=============

.. code-block:: r

    # Copyright 2018 The SQLNet Company GmbH

    # Permission is hereby granted, free of charge, to any person obtaining a copy
    # of this software and associated documentation files (the "Software"), to
    # deal in the Software without restriction, including without limitation the
    # rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
    # sell copies of the Software, and to permit persons to whom the Software is
    # furnished to do so, subject to the following conditions:

    # The above copyright notice and this permission notice shall be included in
    # all copies or substantial portions of the Software.

    # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    # FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    # DEALINGS IN THE SOFTWARE.

    library(data.table)

    library(autosql)

    # -------------------------------------------------

    set.autosql.project("examples")

    # -------------------------------------------------
    # Create artificial data set - don't worry. You
    # do not have to understand this part.

    peripheral.table = data.table(
        column_01=as.character(floor(runif(250000, 1, 10))),
        join_key=floor(runif(250000, 0, 500)),
        time_stamp=runif(250000)
    )

    temp.table = data.table(
        column_01=as.character(floor(runif(500, 1, 10))),
        join_key=(0:499),
        time_stamp=runif(500)
    )

    temp.table = merge(
        peripheral.table,
        temp.table,
        by="join_key"
    )

    temp.table = temp.table[time_stamp.x < time_stamp.y & column_01.x != '1' & column_01.x != '2' & column_01.x != '9',]

    population.table = temp.table[, .(
        targets=.N, 
        column_01=max(column_01.y),
        time_stamp=mean(time_stamp.y)
        ), 
        by=join_key
    ]

    rm(temp.table)

    # -------------------------------------------------
    # Load data into engine

    population.table.on.engine <- create.autosql.data.frame(
        name="POPULATION",
        join.keys=c( "join_key" ),
        time.stamps=c( "time_stamp" ),
        targets=c( "targets" )
    )

    population.table.on.engine <- send.autosql.data.frame(
        population.table.on.engine,
        population.table
    )

    peripheral.table.on.engine <- create.autosql.data.frame(
        name="PERIPHERAL",
        categorical=c( "column_01" ),
        join.keys=c( "join_key" ),
        time.stamps=c( "time_stamp" )
    )

    peripheral.table.on.engine <- send.autosql.data.frame(
        peripheral.table.on.engine,
        peripheral.table
    )

    # -------------------------------------------------
    # Build data model

    population.placeholder <- create.autosql.placeholder("POPULATION")

    peripheral.placeholder <- create.autosql.placeholder("PERIPHERAL")

    population.placeholder <- join.autosql.placeholder(
        population.placeholder,
        peripheral.placeholder,
        "join_key",
        "time_stamp"
    )

    model = create.autosql.model(
        population=population.placeholder,
        peripheral=list(peripheral.placeholder),
        aggregation=list(        
        autosql.count, 
        autosql.sum 
        ),
        use.timestamps=TRUE,
        num.features=10,
        max.length=3,
        fast.training=FALSE,
        min.num.samples=200,
        shrinkage=0.0,
        grid.factor=1.0,
        share.aggregations=1.0,
        num.threads=6,
        predictor=autosql.create.xgboost.regressor()
    )

    send.autosql.model(model)

    # ----------------
    # Fit model

    model = fit.autosql.model(
        model,
        population.table.on.engine,
        peripheral.table.on.engine
    )

    features = autosql.model.transform(
        model,
        population.table.on.engine,
        peripheral.table.on.engine
    )

    cat( autosql.model.to.sql(model) )

    # ----------------
    # Plot results

    plot( 
        features[,1], 
        population.table[["targets"]],
        type="p",
        col="blue",
        xlab="predictions",
        ylab="targets"
    )

    pred = rowMeans( features )

    plot( 
        pred, 
        population.table[["targets"]],
        type="p",
        col="blue",
        xlab="predictions",
        ylab="targets"
    )
