Example 11: The snowflake schema
-------------------------------------

For a full working example, please refer to :ref:`example11_snowflake_schema.R`.

So far, all of our examples have involved a simple star schema. In our experience, the star schema is appropriate for some 80% of all data science projects. But there are cases, in which you need a more complex data schema: In the *snowflake schema*, peripheral table can have peripheral tables of their own. 

In this example, our target variable looks as follows:

.. code-block:: sql

    SELECT AVG( feature_1_1 )
    FROM POPULATION t1
    LEFT JOIN (
        SELECT COUNT( * ) AS feature_1_1
        FROM PERIPHERAL t3
        LEFT JOIN PERIPHERAL2 t4
        ON t3.join_key2 = t4.join_key2
        WHERE (
           ( t3.time_stamp - t4.time_stamp <= 0.5 )
        ) AND t4.time_stamp <= t3.time_stamp
        GROUP BY t3.join_key,
             t3.time_stamp
    ) t2
    ON t1.join_key = t2.join_key
    WHERE t2.time_stamp <= t1.time_stamp
    GROUP BY t1.join_key,
         t1.time_stamp;

In this case, we need to take the average of counts, in other words we need two nested aggregations. The peripheral table ("PERIPHERAL") has a peripheral table of its own ("PERIPHERAL2").

Again, we expect AutoSQL to find this sort of logic on its own, with minimal input from the user.

Building the model
^^^^^^^^^^^^^^^^^^^

As usual, we need to communicate the data schema to AutoSQL:

.. code-block:: r

    population.placeholder <- create.autosql.placeholder(
        "POPULATION",
        join.keys=c( "join_key" ),
        time.stamps=c( "time_stamp" ),
        targets=c( "targets" )
    )

    peripheral.placeholder <- create.autosql.placeholder(
        "PERIPHERAL",
        join.keys=c( "join_key", "join_key2" ),
        time.stamps=c( "time_stamp" )
    )

    peripheral.2.placeholder <- create.autosql.placeholder(
        "PERIPHERAL2",
        numerical=c( "column_01" ),
        join.keys=c( "join_key2" ),
        time.stamps=c( "time_stamp" )
    )

    peripheral.placeholder <- join.autosql.placeholder(
        peripheral.placeholder,
        peripheral.2.placeholder,
        "join_key2",
        "time_stamp"
    )

    population.placeholder <- join.autosql.placeholder(
        population.placeholder,
        peripheral.placeholder,
        "join_key",
        "time_stamp"
    )

    model = create.autosql.model(
        population=population.placeholder,
        peripheral=list(peripheral.placeholder, peripheral.2.placeholder),
        aggregation=list(        
        autosql.count, 
        autosql.sum,
        autosql.avg
        ),
        use.timestamps=TRUE,
        num.features=10,
        num.subfeatures=1,
        max.length=1,
        fast.training=FALSE,
        min.num.samples=200,
        shrinkage=0.1,
        grid.factor=1.0,
        share.aggregations=1.0,
        predictor=autosql.create.xgboost.regressor()
    )

    send.autosql.model(model)

There is one hyperparameter we have not seen so far: *num_subfeatures*. As the name implies, it controls the number of subfeatures between two peripheral tables.

Fitting
^^^^^^^^^

Everything else should seem very familiar:

.. code-block:: r

    model = fit.autosql.model(
        model,
        population.table,
        peripheral.table,
        peripheral.table.2
    )

    scores = score.autosql.model(
        model,
        population.table,
        peripheral.table,
        peripheral.table.2
    )

    features = autosql.model.transform(
        model,
        population.table,
        peripheral.table,
        peripheral.table.2
    )

    predictions = autosql.model.predict(
        model,
        population.table,
        peripheral.table,
        peripheral.table.2
    )


Generating SQL code
^^^^^^^^^^^^^^^^^^^^

.. code-block:: r

    cat( autosql.model.to.sql(model) )

Here is the SQL code AutoSQL has generated:

.. code-block:: sql
    
    CREATE TABLE FEATURE_1_1 AS
    SELECT COUNT( * ) AS feature_1_1,
           t1.join_key2,
           t1.time_stamp
    FROM (
         SELECT *,
            ROW_NUMBER() OVER ( ORDER BY join_key2, time_stamp ASC ) AS rownum
         FROM PERIPHERAL
    ) t1
    LEFT JOIN PERIPHERAL2 t2
    ON t1.join_key2 = t2.join_key2
    WHERE (
       ( t1.time_stamp - t2.time_stamp <= 0.495232 )
    ) AND t2.time_stamp <= t1.time_stamp
    GROUP BY t1.rownum,
         t1.join_key2,
         t1.time_stamp;


    CREATE TABLE FEATURE_1 AS
    SELECT AVG( t2.feature_1_1 ) AS feature_1,
           t1.join_key,
           t1.time_stamp
    FROM (
         SELECT *,
            ROW_NUMBER() OVER ( ORDER BY join_key, time_stamp ASC ) AS rownum
         FROM POPULATION
    ) t1
    LEFT JOIN PERIPHERAL t2
    ON t1.join_key = t2.join_key
    WHERE t2.time_stamp <= t1.time_stamp
    GROUP BY t1.rownum,
         t1.join_key,
         t1.time_stamp;


    CREATE TABLE FEATURE_2_1 AS
    SELECT COUNT( * ) AS feature_2_1,
           t1.join_key2,
           t1.time_stamp
    FROM (
         SELECT *,
            ROW_NUMBER() OVER ( ORDER BY join_key2, time_stamp ASC ) AS rownum
         FROM PERIPHERAL
    ) t1
    LEFT JOIN PERIPHERAL2 t2
    ON t1.join_key2 = t2.join_key2
    WHERE (
       ( t1.time_stamp - t2.time_stamp <= 0.497953 )
    ) AND t2.time_stamp <= t1.time_stamp
    GROUP BY t1.rownum,
         t1.join_key2,
         t1.time_stamp;


    CREATE TABLE FEATURE_2 AS
    SELECT AVG( t2.feature_2_1 ) AS feature_2,
           t1.join_key,
           t1.time_stamp
    FROM (
         SELECT *,
            ROW_NUMBER() OVER ( ORDER BY join_key, time_stamp ASC ) AS rownum
         FROM POPULATION
    ) t1
    LEFT JOIN PERIPHERAL t2
    ON t1.join_key = t2.join_key
    WHERE t2.time_stamp <= t1.time_stamp
    GROUP BY t1.rownum,
         t1.join_key,
         t1.time_stamp;


    CREATE TABLE FEATURE_3_1 AS
    SELECT COUNT( * ) AS feature_3_1,
           t1.join_key2,
           t1.time_stamp
    FROM (
         SELECT *,
            ROW_NUMBER() OVER ( ORDER BY join_key2, time_stamp ASC ) AS rownum
         FROM PERIPHERAL
    ) t1
    LEFT JOIN PERIPHERAL2 t2
    ON t1.join_key2 = t2.join_key2
    WHERE (
       ( t1.time_stamp - t2.time_stamp <= 0.499233 )
    ) AND t2.time_stamp <= t1.time_stamp
    GROUP BY t1.rownum,
         t1.join_key2,
         t1.time_stamp;


    CREATE TABLE FEATURE_3 AS
    SELECT AVG( t2.feature_3_1 ) AS feature_3,
           t1.join_key,
           t1.time_stamp
    FROM (
         SELECT *,
            ROW_NUMBER() OVER ( ORDER BY join_key, time_stamp ASC ) AS rownum
         FROM POPULATION
    ) t1
    LEFT JOIN PERIPHERAL t2
    ON t1.join_key = t2.join_key
    WHERE t2.time_stamp <= t1.time_stamp
    GROUP BY t1.rownum,
         t1.join_key,
         t1.time_stamp;


    CREATE TABLE FEATURE_4_1 AS
    SELECT COUNT( * ) AS feature_4_1,
           t1.join_key2,
           t1.time_stamp
    FROM (
         SELECT *,
            ROW_NUMBER() OVER ( ORDER BY join_key2, time_stamp ASC ) AS rownum
         FROM PERIPHERAL
    ) t1
    LEFT JOIN PERIPHERAL2 t2
    ON t1.join_key2 = t2.join_key2
    WHERE (
       ( t1.time_stamp - t2.time_stamp <= 0.500944 )
    ) AND t2.time_stamp <= t1.time_stamp
    GROUP BY t1.rownum,
         t1.join_key2,
         t1.time_stamp;


    CREATE TABLE FEATURE_4 AS
    SELECT AVG( t2.feature_4_1 ) AS feature_4,
           t1.join_key,
           t1.time_stamp
    FROM (
         SELECT *,
            ROW_NUMBER() OVER ( ORDER BY join_key, time_stamp ASC ) AS rownum
         FROM POPULATION
    ) t1
    LEFT JOIN PERIPHERAL t2
    ON t1.join_key = t2.join_key
    WHERE t2.time_stamp <= t1.time_stamp
    GROUP BY t1.rownum,
         t1.join_key,
         t1.time_stamp;


    CREATE TABLE FEATURE_5_1 AS
    SELECT COUNT( * ) AS feature_5_1,
           t1.join_key2,
           t1.time_stamp
    FROM (
         SELECT *,
            ROW_NUMBER() OVER ( ORDER BY join_key2, time_stamp ASC ) AS rownum
         FROM PERIPHERAL
    ) t1
    LEFT JOIN PERIPHERAL2 t2
    ON t1.join_key2 = t2.join_key2
    WHERE (
       ( t1.time_stamp - t2.time_stamp <= 0.499078 )
    ) AND t2.time_stamp <= t1.time_stamp
    GROUP BY t1.rownum,
         t1.join_key2,
         t1.time_stamp;


    CREATE TABLE FEATURE_5 AS
    SELECT AVG( t2.feature_5_1 ) AS feature_5,
           t1.join_key,
           t1.time_stamp
    FROM (
         SELECT *,
            ROW_NUMBER() OVER ( ORDER BY join_key, time_stamp ASC ) AS rownum
         FROM POPULATION
    ) t1
    LEFT JOIN PERIPHERAL t2
    ON t1.join_key = t2.join_key
    WHERE t2.time_stamp <= t1.time_stamp
    GROUP BY t1.rownum,
         t1.join_key,
         t1.time_stamp;


    CREATE TABLE FEATURE_6_1 AS
    SELECT COUNT( * ) AS feature_6_1,
           t1.join_key2,
           t1.time_stamp
    FROM (
         SELECT *,
            ROW_NUMBER() OVER ( ORDER BY join_key2, time_stamp ASC ) AS rownum
         FROM PERIPHERAL
    ) t1
    LEFT JOIN PERIPHERAL2 t2
    ON t1.join_key2 = t2.join_key2
    WHERE (
       ( t1.time_stamp - t2.time_stamp <= 0.497953 )
    ) AND t2.time_stamp <= t1.time_stamp
    GROUP BY t1.rownum,
         t1.join_key2,
         t1.time_stamp;


    CREATE TABLE FEATURE_6 AS
    SELECT AVG( t2.feature_6_1 ) AS feature_6,
           t1.join_key,
           t1.time_stamp
    FROM (
         SELECT *,
            ROW_NUMBER() OVER ( ORDER BY join_key, time_stamp ASC ) AS rownum
         FROM POPULATION
    ) t1
    LEFT JOIN PERIPHERAL t2
    ON t1.join_key = t2.join_key
    WHERE t2.time_stamp <= t1.time_stamp
    GROUP BY t1.rownum,
         t1.join_key,
         t1.time_stamp;


    CREATE TABLE FEATURE_7_1 AS
    SELECT COUNT( * ) AS feature_7_1,
           t1.join_key2,
           t1.time_stamp
    FROM (
         SELECT *,
            ROW_NUMBER() OVER ( ORDER BY join_key2, time_stamp ASC ) AS rownum
         FROM PERIPHERAL
    ) t1
    LEFT JOIN PERIPHERAL2 t2
    ON t1.join_key2 = t2.join_key2
    WHERE (
       ( t1.time_stamp - t2.time_stamp <= 0.497780 )
    ) AND t2.time_stamp <= t1.time_stamp
    GROUP BY t1.rownum,
         t1.join_key2,
         t1.time_stamp;


    CREATE TABLE FEATURE_7 AS
    SELECT AVG( t2.feature_7_1 ) AS feature_7,
           t1.join_key,
           t1.time_stamp
    FROM (
         SELECT *,
            ROW_NUMBER() OVER ( ORDER BY join_key, time_stamp ASC ) AS rownum
         FROM POPULATION
    ) t1
    LEFT JOIN PERIPHERAL t2
    ON t1.join_key = t2.join_key
    WHERE t2.time_stamp <= t1.time_stamp
    GROUP BY t1.rownum,
         t1.join_key,
         t1.time_stamp;


    CREATE TABLE FEATURE_8_1 AS
    SELECT COUNT( * ) AS feature_8_1,
           t1.join_key2,
           t1.time_stamp
    FROM (
         SELECT *,
            ROW_NUMBER() OVER ( ORDER BY join_key2, time_stamp ASC ) AS rownum
         FROM PERIPHERAL
    ) t1
    LEFT JOIN PERIPHERAL2 t2
    ON t1.join_key2 = t2.join_key2
    WHERE (
       ( t1.time_stamp - t2.time_stamp <= 0.502680 )
    ) AND t2.time_stamp <= t1.time_stamp
    GROUP BY t1.rownum,
         t1.join_key2,
         t1.time_stamp;


    CREATE TABLE FEATURE_8 AS
    SELECT AVG( t2.feature_8_1 ) AS feature_8,
           t1.join_key,
           t1.time_stamp
    FROM (
         SELECT *,
            ROW_NUMBER() OVER ( ORDER BY join_key, time_stamp ASC ) AS rownum
         FROM POPULATION
    ) t1
    LEFT JOIN PERIPHERAL t2
    ON t1.join_key = t2.join_key
    WHERE t2.time_stamp <= t1.time_stamp
    GROUP BY t1.rownum,
         t1.join_key,
         t1.time_stamp;


    CREATE TABLE FEATURE_9_1 AS
    SELECT COUNT( * ) AS feature_9_1,
           t1.join_key2,
           t1.time_stamp
    FROM (
         SELECT *,
            ROW_NUMBER() OVER ( ORDER BY join_key2, time_stamp ASC ) AS rownum
         FROM PERIPHERAL
    ) t1
    LEFT JOIN PERIPHERAL2 t2
    ON t1.join_key2 = t2.join_key2
    WHERE (
       ( t1.time_stamp - t2.time_stamp <= 0.495233 )
    ) AND t2.time_stamp <= t1.time_stamp
    GROUP BY t1.rownum,
         t1.join_key2,
         t1.time_stamp;


    CREATE TABLE FEATURE_9 AS
    SELECT AVG( t2.feature_9_1 ) AS feature_9,
           t1.join_key,
           t1.time_stamp
    FROM (
         SELECT *,
            ROW_NUMBER() OVER ( ORDER BY join_key, time_stamp ASC ) AS rownum
         FROM POPULATION
    ) t1
    LEFT JOIN PERIPHERAL t2
    ON t1.join_key = t2.join_key
    WHERE t2.time_stamp <= t1.time_stamp
    GROUP BY t1.rownum,
         t1.join_key,
         t1.time_stamp;


    CREATE TABLE FEATURE_10_1 AS
    SELECT COUNT( * ) AS feature_10_1,
           t1.join_key2,
           t1.time_stamp
    FROM (
         SELECT *,
            ROW_NUMBER() OVER ( ORDER BY join_key2, time_stamp ASC ) AS rownum
         FROM PERIPHERAL
    ) t1
    LEFT JOIN PERIPHERAL2 t2
    ON t1.join_key2 = t2.join_key2
    WHERE (
       ( t1.time_stamp - t2.time_stamp <= 0.502264 )
    ) AND t2.time_stamp <= t1.time_stamp
    GROUP BY t1.rownum,
         t1.join_key2,
         t1.time_stamp;


    CREATE TABLE FEATURE_10 AS
    SELECT AVG( t2.feature_10_1 ) AS feature_10,
           t1.join_key,
           t1.time_stamp
    FROM (
         SELECT *,
            ROW_NUMBER() OVER ( ORDER BY join_key, time_stamp ASC ) AS rownum
         FROM POPULATION
    ) t1
    LEFT JOIN PERIPHERAL t2
    ON t1.join_key = t2.join_key
    WHERE t2.time_stamp <= t1.time_stamp
    GROUP BY t1.rownum,
         t1.join_key,
         t1.time_stamp;




