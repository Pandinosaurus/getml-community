Example 7: The NULL value handling policy
-------------------------------------------

For a full working example, please refer to :ref:`example_07_null_values.py`.

Missing values are a reality in many business datasets. AutoSQL features a NULL value handling policy that is in compliance with the SQL standard. In essence, the NULL value handling policy boils down to two rules:

1) All aggregations except COUNT(*) will always ignore NULL values.

2) NULL values are never greater than, smaller than or equal to anything (including NULL).

Rule 1 implies that the sum of 1, 2 and NULL is 3 and the average of 1, 2 and NULL is 1.5. 

Rule 2 implies almost all conditions are false when the value is NULL. For instance, consider the condition *t2.column_01 > 0.5*: If an entry in *column_01* happens to be a NULL value, then the condition is false. So are the conditions *t2.column_01 <= 0.5* and *t2.column_01 = 'category_a'*. However, if *column_01* is categorical, then the condition *t2.column_01 != 'category_a'* is possible and is true for entries that are NULL, because according to Rule 2, NULL values are never equal to anything.

Rule 2 has another implication when it comes to join keys: Join keys that are NULL will never be matched with anything, including other join keys that are NULL.

AutoSQL can handle NULL values in any values, except targets. Targets can not be NULL (because that would be silly).

In the Python API, all fields that are either NaN, "nan", None, "None" or an empty string will be interpreted as NULL values.

In this example, we try to solve the following problem:

.. code-block:: sql

    AVG( t2.column_01 ) AS target
    FROM POPULATION t1
    LEFT JOIN PERIPHERAL t2
    ON t1.join_key = t2.join_key
    WHERE t2.column_01 > 0
    AND t2.time_stamp  <= t1.time_stamp
    GROUP BY t2.join_key;

But some values are missing. The fact that some values are missing has no impact on AutoSQL and as you can see, it will solve the problem.

.. image:: Example_7_ensemble.png
