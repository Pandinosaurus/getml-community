Example 8: Hyperparameter optimization using random search
------------------------------------------------------------

For a full working example, please refer to :ref:`example08_random_search.R`.

If you hand-optimize your AutoSQL hyperparameters instead of hand-engineering your features, you will still save a lot of time - but not as much as you could. 

The more professional way to go is to conduct a proper hyperparameter optimization. And AutoSQL makes it very easy for you. Here is how it works:

You begin by setting up a data model, like you always would:

.. code-block:: r

    population.placeholder <- create.autosql.placeholder("POPULATION")

    peripheral.placeholder <- create.autosql.placeholder("PERIPHERAL")

    population.placeholder <- join.autosql.placeholder(
        population.placeholder,
        peripheral.placeholder,
        "join_key",
        "time_stamp"
    )

    rs = create.autosql.random.search(
        num.models=3,
        population=population.placeholder,
        peripheral=list( peripheral.placeholder ),
        loss.function=autosql.square.loss,
        num.features=c(10, 20),
        num.selected.features=c(5, 10),
        share.aggregations=c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0),
        regularization=c(0.0, 0.1),
        feature.selector.n_estimators=c(50, 100),
        predictor.n_estimators=c(50, 100, 200)
    )


What will happen is the following:

1. AutoSQL will train 3 different models (sets of features) on the training set (or whatever parameter you have chosen for *num_iterations*). The hyperparameters will be randomly sampled from your hyperparameter space (*params_dist*). Any hyperparameters not included in the hyperparameter space will be replaced by the default value.

2. Using the feature selector, it will select the best features.

3. On each of the features, it will train the predictor using the training set (which is why setting a predictor is mandatory for random search).

4. It will then evaluate these features on the validation set using the loss function you have defined.

Using *rs.scores* and *rs.candidates* you can then find the model you like most (or you can check out the AutoSQL Monitor for a more beautiful overview).


