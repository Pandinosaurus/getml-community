.. _example08_random_search.R:

=============
example08_random_search.R
=============

.. code-block:: r

    # Copyright 2018 The SQLNet Company GmbH

    # Permission is hereby granted, free of charge, to any person obtaining a copy
    # of this software and associated documentation files (the "Software"), to
    # deal in the Software without restriction, including without limitation the
    # rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
    # sell copies of the Software, and to permit persons to whom the Software is
    # furnished to do so, subject to the following conditions:

    # The above copyright notice and this permission notice shall be included in
    # all copies or substantial portions of the Software.

    # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    # FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    # DEALINGS IN THE SOFTWARE.

    library(data.table)

    library(autosql)

    # -------------------------------------------------

    set.autosql.project("examples")

    # -------------------------------------------------
    # Create artificial data set - don't worry. You
    # do not have to understand this part.

    peripheral.table = data.table(
        column_01=runif(250000),
        join_key=floor(runif(250000, 0, 500)),
        time_stamp=runif(250000)
    )

    temp.table = data.table(
        column_01=runif(500),
        join_key=(0:499),
        time_stamp=runif(500)
    )

    temp.table = merge(
        peripheral.table,
        temp.table,
        by="join_key"
    )

    temp.table = temp.table[time_stamp.x < time_stamp.y & time_stamp.x > time_stamp.y - 0.5,]

    population.table = temp.table[, .(
        targets=.N, 
        column_01=mean(column_01.y),
        time_stamp=mean(time_stamp.y)
        ), 
        by=join_key
    ]

    rm(temp.table)

    # -------------------------------------------------
    # Load data into engine

    population.table.on.engine <- create.autosql.data.frame(
        name="POPULATION",
        join.keys=c( "join_key" ),
        time.stamps=c( "time_stamp" ),
        targets=c( "targets" )
    )

    population.table.on.engine <- send.autosql.data.frame(
        population.table.on.engine,
        population.table[1:20,]
    )

    population.table.on.engine <- append.to.autosql.data.frame(
        population.table.on.engine,
        population.table[21:nrow(population.table),]
    )

    peripheral.table.on.engine <- create.autosql.data.frame(
        name="PERIPHERAL",
        join.keys=c( "join_key" ),
        time.stamps=c( "time_stamp" )
    )

    peripheral.table.on.engine <- send.autosql.data.frame(
        peripheral.table.on.engine,
        peripheral.table[1:10000,]
    )

    peripheral.table.on.engine <- append.to.autosql.data.frame(
        peripheral.table.on.engine,
        peripheral.table[10001:nrow(peripheral.table),]
    )

    # -------------------------------------------------
    # Set up data model

    population.placeholder <- create.autosql.placeholder("POPULATION")

    peripheral.placeholder <- create.autosql.placeholder("PERIPHERAL")

    population.placeholder <- join.autosql.placeholder(
        population.placeholder,
        peripheral.placeholder,
        "join_key",
        "time_stamp"
    )

    rs = create.autosql.random.search(
        num.models=3,
        population=population.placeholder,
        peripheral=list( peripheral.placeholder ),
        loss.function=autosql.square.loss,
        num.features=c(10, 20),
        num.selected.features=c(5, 10),
        share.aggregations=c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0),
        regularization=c(0.0, 0.1),
        feature.selector.n_estimators=c(50, 100),
        predictor.n_estimators=c(50, 100, 200)
    )

    # ----------------

    rs = fit.autosql.random.search( 
        rs,
        population.table.on.engine,
        population.table.on.engine,
        peripheral.table.on.engine
    )

    # ----------------

    print( rs$scores );

    # ----------------

    save.autosql.random.search( rs );

    # ----------------

